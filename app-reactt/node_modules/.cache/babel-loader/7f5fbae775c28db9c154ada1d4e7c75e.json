{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar dom_1 = require(\"./utils/dom\");\n\nvar date_1 = require(\"./utils/date\");\n\nvar register_1 = require(\"./register\"); // all realtime timer\n\n\nvar TIMER_POOL = {};\n/**\n * clear a timer from pool\n * @param tid\n */\n\nvar clear = function (tid) {\n  clearTimeout(tid);\n  delete TIMER_POOL[tid];\n}; // run with timer(setTimeout)\n\n\nfunction run(node, date, localeFunc, opts) {\n  // clear the node's exist timer\n  clear(dom_1.getTimerId(node));\n  var relativeDate = opts.relativeDate,\n      minInterval = opts.minInterval; // get diff seconds\n\n  var diff = date_1.diffSec(date, relativeDate); // render\n\n  node.innerText = date_1.formatDiff(diff, localeFunc);\n  var tid = setTimeout(function () {\n    run(node, date, localeFunc, opts);\n  }, Math.min(Math.max(date_1.nextInterval(diff), minInterval || 1) * 1000, 0x7fffffff)); // there is no need to save node in object. Just save the key\n\n  TIMER_POOL[tid] = 0;\n  dom_1.setTimerId(node, tid);\n}\n/**\n * cancel a timer or all timers\n * @param node - node hosting the time string\n */\n\n\nfunction cancel(node) {\n  // cancel one\n  if (node) clear(dom_1.getTimerId(node)); // cancel all\n  // @ts-ignore\n  else Object.keys(TIMER_POOL).forEach(clear);\n}\n\nexports.cancel = cancel;\n/**\n * render a dom realtime\n * @param nodes\n * @param locale\n * @param opts\n */\n\nfunction render(nodes, locale, opts) {\n  // by .length\n  // @ts-ignore\n  var nodeList = nodes.length ? nodes : [nodes];\n  nodeList.forEach(function (node) {\n    run(node, dom_1.getDateAttribute(node), register_1.getLocale(locale), opts || {});\n  });\n  return nodeList;\n}\n\nexports.render = render;","map":{"version":3,"sources":["../src/realtime.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,KAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA,C,CAGA;;;AACA,IAAM,UAAU,GAAc,EAA9B;AAEA;;;;;AAIA,IAAM,KAAK,GAAG,UAAC,GAAD,EAAY;AACxB,EAAA,YAAY,CAAC,GAAD,CAAZ;AACA,SAAO,UAAU,CAAC,GAAD,CAAjB;AACD,CAHD,C,CAKA;;;AACA,SAAS,GAAT,CAAa,IAAb,EAAgC,IAAhC,EAA8C,UAA9C,EAAsE,IAAtE,EAAgF;AAC9E;AACA,EAAA,KAAK,CAAC,KAAA,CAAA,UAAA,CAAW,IAAX,CAAD,CAAL;AAEQ,MAAA,YAAA,GAAA,IAAA,CAAA,YAAA;AAAA,MAAc,WAAA,GAAA,IAAA,CAAA,WAAd,CAJsE,CAM9E;;AACA,MAAM,IAAI,GAAG,MAAA,CAAA,OAAA,CAAQ,IAAR,EAAc,YAAd,CAAb,CAP8E,CAQ9E;;AACA,EAAA,IAAI,CAAC,SAAL,GAAiB,MAAA,CAAA,UAAA,CAAW,IAAX,EAAiB,UAAjB,CAAjB;AAEA,MAAM,GAAG,GAAI,UAAU,CAAC,YAAA;AACtB,IAAA,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,UAAb,EAAyB,IAAzB,CAAH;AACD,GAFsB,EAEpB,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,GAAL,CAAS,MAAA,CAAA,YAAA,CAAa,IAAb,CAAT,EAA6B,WAAW,IAAI,CAA5C,IAAiD,IAA1D,EAAgE,UAAhE,CAFoB,CAAvB,CAX8E,CAe9E;;AACA,EAAA,UAAU,CAAC,GAAD,CAAV,GAAkB,CAAlB;AACA,EAAA,KAAA,CAAA,UAAA,CAAW,IAAX,EAAiB,GAAjB;AACD;AAED;;;;;;AAIA,SAAgB,MAAhB,CAAuB,IAAvB,EAAyC;AACvC;AACA,MAAI,IAAJ,EAAU,KAAK,CAAC,KAAA,CAAA,UAAA,CAAW,IAAX,CAAD,CAAL,CAAV,CACA;AACA;AAFA,OAGK,MAAM,CAAC,IAAP,CAAY,UAAZ,EAAwB,OAAxB,CAAgC,KAAhC;AACN;;AAND,OAAA,CAAA,MAAA,GAAA,MAAA;AAQA;;;;;;;AAMA,SAAgB,MAAhB,CAAuB,KAAvB,EAAsE,MAAtE,EAAuF,IAAvF,EAAkG;AAChG;AACA;AACA,MAAM,QAAQ,GAAkB,KAAK,CAAC,MAAN,GAAe,KAAf,GAAuB,CAAC,KAAD,CAAvD;AAEA,EAAA,QAAQ,CAAC,OAAT,CAAiB,UAAC,IAAD,EAAkB;AACjC,IAAA,GAAG,CAAC,IAAD,EAAO,KAAA,CAAA,gBAAA,CAAiB,IAAjB,CAAP,EAA+B,UAAA,CAAA,SAAA,CAAU,MAAV,CAA/B,EAAkD,IAAI,IAAI,EAA1D,CAAH;AACD,GAFD;AAIA,SAAO,QAAP;AACD;;AAVD,OAAA,CAAA,MAAA,GAAA,MAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar dom_1 = require(\"./utils/dom\");\nvar date_1 = require(\"./utils/date\");\nvar register_1 = require(\"./register\");\n// all realtime timer\nvar TIMER_POOL = {};\n/**\n * clear a timer from pool\n * @param tid\n */\nvar clear = function (tid) {\n    clearTimeout(tid);\n    delete TIMER_POOL[tid];\n};\n// run with timer(setTimeout)\nfunction run(node, date, localeFunc, opts) {\n    // clear the node's exist timer\n    clear(dom_1.getTimerId(node));\n    var relativeDate = opts.relativeDate, minInterval = opts.minInterval;\n    // get diff seconds\n    var diff = date_1.diffSec(date, relativeDate);\n    // render\n    node.innerText = date_1.formatDiff(diff, localeFunc);\n    var tid = setTimeout(function () {\n        run(node, date, localeFunc, opts);\n    }, Math.min(Math.max(date_1.nextInterval(diff), minInterval || 1) * 1000, 0x7fffffff));\n    // there is no need to save node in object. Just save the key\n    TIMER_POOL[tid] = 0;\n    dom_1.setTimerId(node, tid);\n}\n/**\n * cancel a timer or all timers\n * @param node - node hosting the time string\n */\nfunction cancel(node) {\n    // cancel one\n    if (node)\n        clear(dom_1.getTimerId(node));\n    // cancel all\n    // @ts-ignore\n    else\n        Object.keys(TIMER_POOL).forEach(clear);\n}\nexports.cancel = cancel;\n/**\n * render a dom realtime\n * @param nodes\n * @param locale\n * @param opts\n */\nfunction render(nodes, locale, opts) {\n    // by .length\n    // @ts-ignore\n    var nodeList = nodes.length ? nodes : [nodes];\n    nodeList.forEach(function (node) {\n        run(node, dom_1.getDateAttribute(node), register_1.getLocale(locale), opts || {});\n    });\n    return nodeList;\n}\nexports.render = render;\n//# sourceMappingURL=realtime.js.map"]},"metadata":{},"sourceType":"script"}